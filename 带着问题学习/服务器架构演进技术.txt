
1. Tomcat 与数据库分开部署

2. 引入本地缓存和分布式缓存
	使用 memcached 作为本地缓存，使用 Redis 作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。

3. 引入反向代理实现负载均衡
	Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持 http 协议，还会涉及 session 共享、文件上传下载的问题。

4. 数据库读写分离
	MyCat（MyCat 入门教程），它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。

5. 数据库按业务分库
	把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。

6. 把大表拆分为小表
	分库分表方案

7. 使用 LVS 或 F5 来使多个 Nginx 负载均衡
	keepalive + LVS/F5

8. 通过 DNS 轮询实现机房间的负载均衡
	在 DNS 服务器中可配置一个域名对应多个 IP 地址，每个 IP 地址对应到不同的机房里的虚拟 IP。当用户访问 www.taobao.com 时，DNS 服务器会使用轮询策略或其他策略，来选择某个 IP 供用户访问

9. 引入 NoSQL 数据库和搜索引擎等技术
	对于海量文件存储，可通过分布式文件系统 HDFS 解决，对于 key value 类型的数据，可通过 HBase 和 Redis 等方案解决，对于全文检索场景，可通过搜索引擎如 ElasticSearch 解决，对于多维分析场景，可通过 Kylin 或 Druid 等方案解决。

10.大应用拆分为小应用
	按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心 Zookeeper 来解决
	
11.复用的功能抽离成微服务
	可以通过 Dubbo、SpringCloud(Spring Cloud 教程) 等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。

12.引入企业服务总线ESB屏蔽服务接口的访问差异
	通过 ESB 统一进行访问协议转换，应用统一通过 ESB 来访问后端服务，服务与服务之间也通过 ESB 来相互调用，以此降低系统的耦合程度。

13.引入容器化技术实现运行环境隔离与动态服务管理
	目前最流行的容器化技术是 Docker(Docker 教程)，最流行的容器管理服务是 Kubernetes(K8S)，应用/服务可以打包为 Docker 镜像，通过 K8S 来动态分发和部署镜像。

14.以云平台承载系统
	系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题，在大促的时间段里，在云平台中临时申请更多的资源，结合 Docker 和 K8S 来快速部署服务
	，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。
	

架构设计经验小结
1）架构的调整是否必须按照上述演变路径进行？

不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进，在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。

2）对于将要实施的系统，架构应该设计到什么程度？

对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。

3）服务端架构和大数据架构有什么区别？

所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术，如数据采集有 Flume、Sqoop、Kettle 等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL 数据库 HBase、MongoDB 等，数据分析有 Spark 技术栈、机器学习算法等。

总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。

4）有没有一些架构设计的原则？

a. N+1 设计：系统中的每个组件都应做到没有单点故障；

b. 回滚设计：确保系统可以向前兼容，在系统升级时应能有办法回滚版本；

c. 禁用设计：应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；

d. 监控设计：在设计阶段就要考虑监控的手段；

e. 多活数据中心设计：若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；

f. 采用成熟的技术：刚开发的或开源的技术往往存在很多隐藏的 bug，出了问题没有商业支持可能会是一个灾难；

g. 资源隔离设计：应避免单一业务占用全部资源；

h. 架构应能水平扩展：系统只有做到能水平扩展，才能有效避免瓶颈问题；

i. 非核心则购买：非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；

j. 使用商用硬件：商用硬件能有效降低硬件故障的机率；

k. 快速迭代：系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；

l. 无状态设计：服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。